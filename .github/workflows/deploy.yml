name: Pipeline for Absenteeism Prediction App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Setup Virtual Environment
    runs-on: ubuntu-latest
    outputs:
      venv_path: ${{ steps.setup-env.outputs.venv_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Virtual Environment
        uses: actions/cache@v4
        with:
          path: fastapienv
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Create virtual environment if not cached
        id: setup-env
        run: |
          if [ ! -d "fastapienv" ]; then
            python -m venv fastapienv
            source fastapienv/bin/activate
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install flake8
          fi
          echo "venv_path=$(pwd)/fastapienv" >> $GITHUB_ENV
          echo "venv_path=$(pwd)/fastapienv" >> $GITHUB_OUTPUT
        
      - name: Verify Virtual Environment Path
        run: |
          echo "Virtual environment path is ${{ env.venv_path }}"
          ls -l ${{ env.venv_path }}

  build:
    name: Build and Lint with flake8
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Virtual Environment Cache 
        uses: actions/cache@v4
        with:
          path: fastapienv
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Debugging step - Verify Virtual Environment Path
        run: |
          echo "venv path in build: ${{ needs.setup.outputs.venv_path }}"
          ls -l ${{ needs.setup.outputs.venv_path }}

      - name: Debugging Environment Before Linting
        run: |
          echo "Debugging Environment:"
          source ${{ needs.setup.outputs.venv_path }}/bin/activate
          python --version
          pip list
          ls -l ${{ needs.setup.outputs.venv_path }}

      - name: Reuse Virtual Environment and Run flake8 linting
        run: |
          source ${{ needs.setup.outputs.venv_path }}/bin/activate
          mkdir -p logs  # Create a folder to store logs
          # stop the build if there are Python errors as specified in the config file
          flake8 main.py test.py --config .flake8 | tee logs/flake8.log
          if [ -s logs/flake8.log ]; then
            while IFS= read -r line; do
              echo "::error file=$(echo $line | cut -d':' -f1),line=$(echo $line | cut -d':' -f2),col=$(echo $line | cut -d':' -f3)::$(echo $line | cut -d':' -f4-)"
            done < logs/flake8.log
          fi
        shell: bash


      - name: Upload flake8 Logs
        uses: actions/upload-artifact@v3
        with:
          name: flake8-logs
          path: logs/

  test:
    name: Run Pytest
    runs-on: ubuntu-latest
    needs: [setup, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Virtual Environment Cache 
        uses: actions/cache@v4
        with:
          path: fastapienv
          key: ${{ runner.os }}-python-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Debugging step - Verify Virtual Environment Path
        run: |
          echo "venv path in test: ${{ needs.setup.outputs.venv_path }}"
          ls -l ${{ needs.setup.outputs.venv_path }}

      - name: Reuse Virtual Environment and Run tests
        run: |
          source ${{ needs.setup.outputs.venv_path }}/bin/activate
          echo "Python version: $(python --version)"
          echo "Installed packages: $(pip list)"
          mkdir -p logs  # Ensure logs folder exists
          pytest test.py | tee logs/test.log 
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            exit $exit_code
          fi
        shell: bash
        
      - name: Upload Logs Folder
        uses: actions/upload-artifact@v3
        with:
          name: test-logs
          path: logs/

  dockerize:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check Docker Secrets
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ] || [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "Docker secrets are missing! Exiting..."
            exit 1
          fi

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/absenteeism_prediction_app:${{ github.sha }}

      - name: Test Docker Image
        run: |
          mkdir -p logs
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/absenteeism_prediction_app:${{ github.sha }} python -m pytest test.py > logs/docker_test.log || exit 1

      - name: Upload Logs Folder
        uses: actions/upload-artifact@v3
        with:
          name: docker-test-logs
          path: logs/

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: dockerize

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Login to Heroku
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: true

      - name: Get Heroku App URL
        id: get_url
        run: |
          APP_URL=$(heroku info -s --app ${{ secrets.HEROKU_APP_NAME }} | grep web_url | cut -d= -f2)
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

      - name: Scale dynos
        run: |
          heroku ps:scale web=1 --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Wait for Heroku Dyno to Start
        run: |
          sleep 30

      - name: HTTP Response Check
        run: |
          attempts=0
          max_attempts=2
          while [ $attempts -lt $max_attempts ]; do
            echo "Attempting HTTP response check at attempt $attempts"
            HTTP_STATUS=$(curl --write-out "%{http_code}" --silent --output /dev/null --fail "${{ steps.get_url.outputs.app_url }}")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "HTTP response check passed after $attempts attempts"
              exit 0
            else
              echo "HTTP response check failed with status: $HTTP_STATUS"
            fi
            attempts=$((attempts + 1))
            if [ $attempts -eq $max_attempts ]; then
              echo "HTTP response check failed after $max_attempts attempts"
              exit 1
            fi
            echo "HTTP response check failed, retrying in 30 seconds (attempt $attempts of $max_attempts)"
            sleep 30
          done

      - name: Verify Dyno Status via Heroku CLI
        run: |
          attempts=0
          max_attempts=2
          while [ $attempts -lt $max_attempts ]; do
            echo "Checking Dyno Status at attempt $attempts"
            DYNOS_STATUS=$(heroku ps -a ${{ secrets.HEROKU_APP_NAME }} | grep web | awk '{print $3}')
            if [[ "$DYNOS_STATUS" == "up" ]]; then
              echo "Dyno is up after $attempts attempts"
              exit 0
            else
              echo "Dyno might not be running, status: $DYNOS_STATUS"
            fi
            attempts=$((attempts + 1))
            if [ $attempts -eq $max_attempts ]; then
              echo "Dyno status check failed after $max_attempts attempts"
              exit 1
            fi
            echo "Dyno status check failed, retrying in 30 seconds (attempt $attempts of $max_attempts)"
            sleep 30
          done

env:
  FASTAPI_ENV: production
